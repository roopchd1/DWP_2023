

CREATE DATABASE IF NOT EXISTS webshop;
USE webshop;

-- Table for Brands
CREATE TABLE IF NOT EXISTS brand (
    brand_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    brand_title VARCHAR(100)
);

-- Table for Categories
CREATE TABLE IF NOT EXISTS category (
    category_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    category_title VARCHAR(100)
);

-- Table for Products
CREATE TABLE IF NOT EXISTS products (
    product_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    product_title VARCHAR(100),
    product_description VARCHAR(255),
    product_keywords VARCHAR(255),
    category_id INT NOT NULL,
    brand_id INT NOT NULL,
    product_image1 VARCHAR(255),
    product_image2 VARCHAR(255),
    product_image3 VARCHAR(255),
    product_price VARCHAR(255),
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(255),
    FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE,
    FOREIGN KEY (brand_id) REFERENCES brand(brand_id) ON DELETE CASCADE
);

-- Table for Cart Details
CREATE TABLE IF NOT EXISTS cart_details (
    cart_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    ip_address VARCHAR(255),
    quantity INT,
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);

-- Table for User Registration
CREATE TABLE IF NOT EXISTS user_table (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    user_name VARCHAR(100),
    user_email VARCHAR(100),
    user_password VARCHAR(255),
    user_image VARCHAR(255),
    user_ip VARCHAR(100),
    user_address VARCHAR(255),
    user_phone VARCHAR(20)
);

-- Create user_orders table
CREATE TABLE IF NOT EXISTS user_orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    amount_due INT(255),
    invoice_number INT(50),
    total_products INT(255),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    order_status VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES user_table (user_id) ON DELETE CASCADE
);

-- Table for pending orders
CREATE TABLE IF NOT EXISTS orders_pending (
    order_id INT NOT NULL,
    user_id INT NOT NULL,
    invoice_number INT(255) NOT NULL,
    product_id INT NOT NULL,
    quantity INT(255),
    order_status VARCHAR(255) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES user_orders (order_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES user_table (user_id) ON DELETE CASCADE,
    FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    invoice_number INT NOT NULL,
    amount INT NOT NULL,
    payment_mode VARCHAR(255),
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (order_id) REFERENCES user_orders (order_id) ON DELETE CASCADE
);
CREATE TABLE IF NOT EXISTS admin_table (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    admin_name VARCHAR(100),
    admin_email VARCHAR(100),
    admin_password VARCHAR(100)
);
CREATE TABLE IF NOT EXISTS news_section (
    news_id INT PRIMARY KEY AUTO_INCREMENT,
    news_title VARCHAR(255) NOT NULL,
    news_image VARCHAR(255) NOT NULL,
    editor_name VARCHAR(255) NOT NULL,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE news_section
ADD COLUMN news_content TEXT NOT NULL;


CREATE TABLE IF NOT EXISTS daily_offers (
    offer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    product_id INT NOT NULL,
    offer_price VARCHAR(255),
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date DATE NOT NULL,
    status VARCHAR(255),
    FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE
);